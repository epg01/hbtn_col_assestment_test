// Code generated by sqlc. DO NOT EDIT.
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO  payment (
    type,
    txn_id,
    total
) VALUES (
    $1, $2, $3
) RETURNING id, type, txn_id, total, created_at
`

type CreatePaymentParams struct {
	Type  string  `json:"type"`
	TxnID string  `json:"txnID"`
	Total float64 `json:"total"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.queryRow(ctx, q.createPaymentStmt, createPayment, arg.Type, arg.TxnID, arg.Total)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TxnID,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT  id, type, txn_id, total, created_at FROM payment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.queryRow(ctx, q.getPaymentStmt, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TxnID,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const listPpayment = `-- name: ListPpayment :many
SELECT id, type, txn_id, total, created_at FROM payment
ORDER BY id
LIMIT $1
`

func (q *Queries) ListPpayment(ctx context.Context, limit int32) ([]Payment, error) {
	rows, err := q.query(ctx, q.listPpaymentStmt, listPpayment, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.TxnID,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
