// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO  users (
    name,
    last_name,
    gob_id,
    email,
    company
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, last_name, gob_id, email, company
`

type CreateUserParams struct {
	Name     string `json:"name"`
	LastName string `json:"lastName"`
	GobID    string `json:"gobID"`
	Email    string `json:"email"`
	Company  string `json:"company"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.LastName,
		arg.GobID,
		arg.Email,
		arg.Company,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.GobID,
		&i.Email,
		&i.Company,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT  id, name, last_name, gob_id, email, company FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.GobID,
		&i.Email,
		&i.Company,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, name, last_name, gob_id, email, company FROM users
ORDER BY id
LIMIT $1
`

func (q *Queries) ListUser(ctx context.Context, limit int32) ([]User, error) {
	rows, err := q.query(ctx, q.listUserStmt, listUser, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.GobID,
			&i.Email,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2
WHERE id = $1
RETURNING id, name, last_name, gob_id, email, company
`

type UpdateUserParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.GobID,
		&i.Email,
		&i.Company,
	)
	return i, err
}
