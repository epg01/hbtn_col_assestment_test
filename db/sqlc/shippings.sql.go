// Code generated by sqlc. DO NOT EDIT.
// source: shippings.sql

package db

import (
	"context"
)

const createShipping = `-- name: CreateShipping :one
INSERT INTO  shippings (
    address,
    city,
    state,
    country,
    cost
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, address, city, state, country, cost
`

type CreateShippingParams struct {
	Address string  `json:"address"`
	City    string  `json:"city"`
	State   string  `json:"state"`
	Country string  `json:"country"`
	Cost    float64 `json:"cost"`
}

func (q *Queries) CreateShipping(ctx context.Context, arg CreateShippingParams) (Shipping, error) {
	row := q.queryRow(ctx, q.createShippingStmt, createShipping,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.Cost,
	)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Cost,
	)
	return i, err
}

const getShipping = `-- name: GetShipping :one
SELECT  id, address, city, state, country, cost FROM shippings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShipping(ctx context.Context, id int64) (Shipping, error) {
	row := q.queryRow(ctx, q.getShippingStmt, getShipping, id)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Cost,
	)
	return i, err
}

const listShipping = `-- name: ListShipping :many
SELECT id, address, city, state, country, cost FROM shippings
ORDER BY id
LIMIT $1
`

func (q *Queries) ListShipping(ctx context.Context, limit int32) ([]Shipping, error) {
	rows, err := q.query(ctx, q.listShippingStmt, listShipping, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shipping
	for rows.Next() {
		var i Shipping
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipping = `-- name: UpdateShipping :one
UPDATE shippings
SET city = $2
WHERE id = $1
RETURNING id, address, city, state, country, cost
`

type UpdateShippingParams struct {
	ID   int64  `json:"id"`
	City string `json:"city"`
}

func (q *Queries) UpdateShipping(ctx context.Context, arg UpdateShippingParams) (Shipping, error) {
	row := q.queryRow(ctx, q.updateShippingStmt, updateShipping, arg.ID, arg.City)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Cost,
	)
	return i, err
}
