// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.createPaymentStmt, err = db.PrepareContext(ctx, createPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePayment: %w", err)
	}
	if q.createShippingStmt, err = db.PrepareContext(ctx, createShipping); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShipping: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getOrderStmt, err = db.PrepareContext(ctx, getOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrder: %w", err)
	}
	if q.getPaymentStmt, err = db.PrepareContext(ctx, getPayment); err != nil {
		return nil, fmt.Errorf("error preparing query GetPayment: %w", err)
	}
	if q.getShippingStmt, err = db.PrepareContext(ctx, getShipping); err != nil {
		return nil, fmt.Errorf("error preparing query GetShipping: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listOrderStmt, err = db.PrepareContext(ctx, listOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrder: %w", err)
	}
	if q.listPpaymentStmt, err = db.PrepareContext(ctx, listPpayment); err != nil {
		return nil, fmt.Errorf("error preparing query ListPpayment: %w", err)
	}
	if q.listShippingStmt, err = db.PrepareContext(ctx, listShipping); err != nil {
		return nil, fmt.Errorf("error preparing query ListShipping: %w", err)
	}
	if q.listUserStmt, err = db.PrepareContext(ctx, listUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListUser: %w", err)
	}
	if q.updateShippingStmt, err = db.PrepareContext(ctx, updateShipping); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShipping: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.createPaymentStmt != nil {
		if cerr := q.createPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentStmt: %w", cerr)
		}
	}
	if q.createShippingStmt != nil {
		if cerr := q.createShippingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShippingStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getOrderStmt != nil {
		if cerr := q.getOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderStmt: %w", cerr)
		}
	}
	if q.getPaymentStmt != nil {
		if cerr := q.getPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentStmt: %w", cerr)
		}
	}
	if q.getShippingStmt != nil {
		if cerr := q.getShippingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShippingStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listOrderStmt != nil {
		if cerr := q.listOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrderStmt: %w", cerr)
		}
	}
	if q.listPpaymentStmt != nil {
		if cerr := q.listPpaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPpaymentStmt: %w", cerr)
		}
	}
	if q.listShippingStmt != nil {
		if cerr := q.listShippingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listShippingStmt: %w", cerr)
		}
	}
	if q.listUserStmt != nil {
		if cerr := q.listUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserStmt: %w", cerr)
		}
	}
	if q.updateShippingStmt != nil {
		if cerr := q.updateShippingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShippingStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createOrderStmt    *sql.Stmt
	createPaymentStmt  *sql.Stmt
	createShippingStmt *sql.Stmt
	createUserStmt     *sql.Stmt
	getOrderStmt       *sql.Stmt
	getPaymentStmt     *sql.Stmt
	getShippingStmt    *sql.Stmt
	getUserStmt        *sql.Stmt
	listOrderStmt      *sql.Stmt
	listPpaymentStmt   *sql.Stmt
	listShippingStmt   *sql.Stmt
	listUserStmt       *sql.Stmt
	updateShippingStmt *sql.Stmt
	updateUserStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createOrderStmt:    q.createOrderStmt,
		createPaymentStmt:  q.createPaymentStmt,
		createShippingStmt: q.createShippingStmt,
		createUserStmt:     q.createUserStmt,
		getOrderStmt:       q.getOrderStmt,
		getPaymentStmt:     q.getPaymentStmt,
		getShippingStmt:    q.getShippingStmt,
		getUserStmt:        q.getUserStmt,
		listOrderStmt:      q.listOrderStmt,
		listPpaymentStmt:   q.listPpaymentStmt,
		listShippingStmt:   q.listShippingStmt,
		listUserStmt:       q.listUserStmt,
		updateShippingStmt: q.updateShippingStmt,
		updateUserStmt:     q.updateUserStmt,
	}
}
